-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity matrixmul is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    a_dout : IN STD_LOGIC_VECTOR (23 downto 0);
    a_empty_n : IN STD_LOGIC;
    a_read : OUT STD_LOGIC;
    b_dout : IN STD_LOGIC_VECTOR (23 downto 0);
    b_empty_n : IN STD_LOGIC;
    b_read : OUT STD_LOGIC;
    res_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_full_n : IN STD_LOGIC;
    res_write : OUT STD_LOGIC );
end;


architecture behav of matrixmul is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "matrixmul_matrixmul,hls_ip_2022_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcu50-fsvh2104-2L-e,HLS_INPUT_CLOCK=13.333000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.424000,HLS_SYN_LAT=37,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=119,HLS_SYN_LUT=196,HLS_VERSION=2022_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";

attribute shreg_extract : string;
    signal ap_rst_reg_2 : STD_LOGIC := '1';
attribute shreg_extract of ap_rst_reg_2 : signal is "no";
    signal ap_rst_reg_1 : STD_LOGIC := '1';
attribute shreg_extract of ap_rst_reg_1 : signal is "no";
    signal ap_rst_reg : STD_LOGIC := '1';
attribute shreg_extract of ap_rst_reg : signal is "no";
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal a_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln54_fu_83_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_10_fu_95_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_10_reg_134 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp1_reg_139 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_s_reg_144 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_matrixmul_Pipeline_Col_fu_64_ap_start : STD_LOGIC;
    signal grp_matrixmul_Pipeline_Col_fu_64_ap_done : STD_LOGIC;
    signal grp_matrixmul_Pipeline_Col_fu_64_ap_idle : STD_LOGIC;
    signal grp_matrixmul_Pipeline_Col_fu_64_ap_ready : STD_LOGIC;
    signal grp_matrixmul_Pipeline_Col_fu_64_b_read : STD_LOGIC;
    signal grp_matrixmul_Pipeline_Col_fu_64_res_din : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_matrixmul_Pipeline_Col_fu_64_res_write : STD_LOGIC;
    signal grp_matrixmul_Pipeline_Col_fu_64_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal i_fu_54 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln54_fu_89_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_state2 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component matrixmul_matrixmul_Pipeline_Col IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        b_dout : IN STD_LOGIC_VECTOR (23 downto 0);
        b_empty_n : IN STD_LOGIC;
        b_read : OUT STD_LOGIC;
        res_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        res_full_n : IN STD_LOGIC;
        res_write : OUT STD_LOGIC;
        sext_ln61 : IN STD_LOGIC_VECTOR (7 downto 0);
        sext_ln61_1 : IN STD_LOGIC_VECTOR (7 downto 0);
        sext_ln61_2 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    grp_matrixmul_Pipeline_Col_fu_64 : component matrixmul_matrixmul_Pipeline_Col
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_reg,
        ap_start => grp_matrixmul_Pipeline_Col_fu_64_ap_start,
        ap_done => grp_matrixmul_Pipeline_Col_fu_64_ap_done,
        ap_idle => grp_matrixmul_Pipeline_Col_fu_64_ap_idle,
        ap_ready => grp_matrixmul_Pipeline_Col_fu_64_ap_ready,
        b_dout => b_dout,
        b_empty_n => b_empty_n,
        b_read => grp_matrixmul_Pipeline_Col_fu_64_b_read,
        res_din => grp_matrixmul_Pipeline_Col_fu_64_res_din,
        res_full_n => res_full_n,
        res_write => grp_matrixmul_Pipeline_Col_fu_64_res_write,
        sext_ln61 => empty_10_reg_134,
        sext_ln61_1 => tmp1_reg_139,
        sext_ln61_2 => tmp_s_reg_144);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_reg = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_matrixmul_Pipeline_Col_fu_64_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_reg = '1') then
                grp_matrixmul_Pipeline_Col_fu_64_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    grp_matrixmul_Pipeline_Col_fu_64_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_matrixmul_Pipeline_Col_fu_64_ap_ready = ap_const_logic_1)) then 
                    grp_matrixmul_Pipeline_Col_fu_64_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_rst_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_rst_reg <= ap_rst_reg_1;
        end if;
    end process;

    ap_rst_reg_1_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_rst_reg_1 <= ap_rst_reg_2;
        end if;
    end process;

    ap_rst_reg_2_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_rst_reg_2 <= ap_rst;
        end if;
    end process;

    i_fu_54_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_fu_54 <= ap_const_lv2_0;
            elsif ((not(((icmp_ln54_fu_83_p2 = ap_const_lv1_0) and (ap_const_logic_0 = a_empty_n))) and (icmp_ln54_fu_83_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_fu_54 <= add_ln54_fu_89_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln54_fu_83_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                empty_10_reg_134 <= empty_10_fu_95_p1;
                tmp1_reg_139 <= a_dout(15 downto 8);
                tmp_s_reg_144 <= a_dout(23 downto 16);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, a_empty_n, ap_CS_fsm_state2, icmp_ln54_fu_83_p2, grp_matrixmul_Pipeline_Col_fu_64_ap_done, ap_CS_fsm_state4)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not(((icmp_ln54_fu_83_p2 = ap_const_lv1_0) and (ap_const_logic_0 = a_empty_n))) and (icmp_ln54_fu_83_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif ((not(((icmp_ln54_fu_83_p2 = ap_const_lv1_0) and (ap_const_logic_0 = a_empty_n))) and (icmp_ln54_fu_83_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((grp_matrixmul_Pipeline_Col_fu_64_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;

    a_blk_n_assign_proc : process(a_empty_n, ap_CS_fsm_state2, icmp_ln54_fu_83_p2)
    begin
        if (((icmp_ln54_fu_83_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            a_blk_n <= a_empty_n;
        else 
            a_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    a_read_assign_proc : process(a_empty_n, ap_CS_fsm_state2, icmp_ln54_fu_83_p2)
    begin
        if ((not(((icmp_ln54_fu_83_p2 = ap_const_lv1_0) and (ap_const_logic_0 = a_empty_n))) and (icmp_ln54_fu_83_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            a_read <= ap_const_logic_1;
        else 
            a_read <= ap_const_logic_0;
        end if; 
    end process;

    add_ln54_fu_89_p2 <= std_logic_vector(unsigned(i_fu_54) + unsigned(ap_const_lv2_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state2_blk_assign_proc : process(a_empty_n, icmp_ln54_fu_83_p2)
    begin
        if (((icmp_ln54_fu_83_p2 = ap_const_lv1_0) and (ap_const_logic_0 = a_empty_n))) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state3_blk <= ap_const_logic_0;

    ap_ST_fsm_state4_blk_assign_proc : process(grp_matrixmul_Pipeline_Col_fu_64_ap_done)
    begin
        if ((grp_matrixmul_Pipeline_Col_fu_64_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state2_assign_proc : process(a_empty_n, icmp_ln54_fu_83_p2)
    begin
                ap_block_state2 <= ((icmp_ln54_fu_83_p2 = ap_const_lv1_0) and (ap_const_logic_0 = a_empty_n));
    end process;


    ap_done_assign_proc : process(a_empty_n, ap_CS_fsm_state2, icmp_ln54_fu_83_p2)
    begin
        if ((not(((icmp_ln54_fu_83_p2 = ap_const_lv1_0) and (ap_const_logic_0 = a_empty_n))) and (icmp_ln54_fu_83_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(a_empty_n, ap_CS_fsm_state2, icmp_ln54_fu_83_p2)
    begin
        if ((not(((icmp_ln54_fu_83_p2 = ap_const_lv1_0) and (ap_const_logic_0 = a_empty_n))) and (icmp_ln54_fu_83_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    b_read_assign_proc : process(grp_matrixmul_Pipeline_Col_fu_64_b_read, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            b_read <= grp_matrixmul_Pipeline_Col_fu_64_b_read;
        else 
            b_read <= ap_const_logic_0;
        end if; 
    end process;

    empty_10_fu_95_p1 <= a_dout(8 - 1 downto 0);
    grp_matrixmul_Pipeline_Col_fu_64_ap_start <= grp_matrixmul_Pipeline_Col_fu_64_ap_start_reg;
    icmp_ln54_fu_83_p2 <= "1" when (i_fu_54 = ap_const_lv2_3) else "0";
    res_din <= grp_matrixmul_Pipeline_Col_fu_64_res_din;

    res_write_assign_proc : process(grp_matrixmul_Pipeline_Col_fu_64_res_write, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            res_write <= grp_matrixmul_Pipeline_Col_fu_64_res_write;
        else 
            res_write <= ap_const_logic_0;
        end if; 
    end process;

end behav;
