// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="matrixmul_matrixmul,hls_ip_2022_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcu50-fsvh2104-2L-e,HLS_INPUT_CLOCK=13.333000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.424000,HLS_SYN_LAT=37,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=119,HLS_SYN_LUT=196,HLS_VERSION=2022_1}" *)

module matrixmul (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        a_dout,
        a_empty_n,
        a_read,
        b_dout,
        b_empty_n,
        b_read,
        res_din,
        res_full_n,
        res_write
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [23:0] a_dout;
input   a_empty_n;
output   a_read;
input  [23:0] b_dout;
input   b_empty_n;
output   b_read;
output  [15:0] res_din;
input   res_full_n;
output   res_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg a_read;
reg b_read;
reg res_write;

(* shreg_extract = "no" *) reg    ap_rst_reg_2;
(* shreg_extract = "no" *) reg    ap_rst_reg_1;
(* shreg_extract = "no" *) reg    ap_rst_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    a_blk_n;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln54_fu_83_p2;
wire   [7:0] empty_10_fu_95_p1;
reg   [7:0] empty_10_reg_134;
reg   [7:0] tmp1_reg_139;
reg   [7:0] tmp_s_reg_144;
wire    grp_matrixmul_Pipeline_Col_fu_64_ap_start;
wire    grp_matrixmul_Pipeline_Col_fu_64_ap_done;
wire    grp_matrixmul_Pipeline_Col_fu_64_ap_idle;
wire    grp_matrixmul_Pipeline_Col_fu_64_ap_ready;
wire    grp_matrixmul_Pipeline_Col_fu_64_b_read;
wire   [15:0] grp_matrixmul_Pipeline_Col_fu_64_res_din;
wire    grp_matrixmul_Pipeline_Col_fu_64_res_write;
reg    grp_matrixmul_Pipeline_Col_fu_64_ap_start_reg;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
reg   [1:0] i_fu_54;
wire   [1:0] add_ln54_fu_89_p2;
reg    ap_block_state2;
reg   [3:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
reg    ap_ST_fsm_state4_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_rst_reg_2 = 1'b1;
#0 ap_rst_reg_1 = 1'b1;
#0 ap_rst_reg = 1'b1;
#0 ap_CS_fsm = 4'd1;
#0 grp_matrixmul_Pipeline_Col_fu_64_ap_start_reg = 1'b0;
end

matrixmul_matrixmul_Pipeline_Col grp_matrixmul_Pipeline_Col_fu_64(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_reg),
    .ap_start(grp_matrixmul_Pipeline_Col_fu_64_ap_start),
    .ap_done(grp_matrixmul_Pipeline_Col_fu_64_ap_done),
    .ap_idle(grp_matrixmul_Pipeline_Col_fu_64_ap_idle),
    .ap_ready(grp_matrixmul_Pipeline_Col_fu_64_ap_ready),
    .b_dout(b_dout),
    .b_empty_n(b_empty_n),
    .b_read(grp_matrixmul_Pipeline_Col_fu_64_b_read),
    .res_din(grp_matrixmul_Pipeline_Col_fu_64_res_din),
    .res_full_n(res_full_n),
    .res_write(grp_matrixmul_Pipeline_Col_fu_64_res_write),
    .sext_ln61(empty_10_reg_134),
    .sext_ln61_1(tmp1_reg_139),
    .sext_ln61_2(tmp_s_reg_144)
);

always @ (posedge ap_clk) begin
    if (ap_rst_reg == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_reg == 1'b1) begin
        grp_matrixmul_Pipeline_Col_fu_64_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            grp_matrixmul_Pipeline_Col_fu_64_ap_start_reg <= 1'b1;
        end else if ((grp_matrixmul_Pipeline_Col_fu_64_ap_ready == 1'b1)) begin
            grp_matrixmul_Pipeline_Col_fu_64_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    ap_rst_reg <= ap_rst_reg_1;
end

always @ (posedge ap_clk) begin
    ap_rst_reg_1 <= ap_rst_reg_2;
end

always @ (posedge ap_clk) begin
    ap_rst_reg_2 <= ap_rst;
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_fu_54 <= 2'd0;
    end else if ((~((icmp_ln54_fu_83_p2 == 1'd0) & (1'b0 == a_empty_n)) & (icmp_ln54_fu_83_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_fu_54 <= add_ln54_fu_89_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln54_fu_83_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        empty_10_reg_134 <= empty_10_fu_95_p1;
        tmp1_reg_139 <= {{a_dout[15:8]}};
        tmp_s_reg_144 <= {{a_dout[23:16]}};
    end
end

always @ (*) begin
    if (((icmp_ln54_fu_83_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        a_blk_n = a_empty_n;
    end else begin
        a_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((icmp_ln54_fu_83_p2 == 1'd0) & (1'b0 == a_empty_n)) & (icmp_ln54_fu_83_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        a_read = 1'b1;
    end else begin
        a_read = 1'b0;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln54_fu_83_p2 == 1'd0) & (1'b0 == a_empty_n))) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

assign ap_ST_fsm_state3_blk = 1'b0;

always @ (*) begin
    if ((grp_matrixmul_Pipeline_Col_fu_64_ap_done == 1'b0)) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

always @ (*) begin
    if ((~((icmp_ln54_fu_83_p2 == 1'd0) & (1'b0 == a_empty_n)) & (icmp_ln54_fu_83_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((icmp_ln54_fu_83_p2 == 1'd0) & (1'b0 == a_empty_n)) & (icmp_ln54_fu_83_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        b_read = grp_matrixmul_Pipeline_Col_fu_64_b_read;
    end else begin
        b_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        res_write = grp_matrixmul_Pipeline_Col_fu_64_res_write;
    end else begin
        res_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((icmp_ln54_fu_83_p2 == 1'd0) & (1'b0 == a_empty_n)) & (icmp_ln54_fu_83_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if ((~((icmp_ln54_fu_83_p2 == 1'd0) & (1'b0 == a_empty_n)) & (icmp_ln54_fu_83_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((grp_matrixmul_Pipeline_Col_fu_64_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln54_fu_89_p2 = (i_fu_54 + 2'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

always @ (*) begin
    ap_block_state2 = ((icmp_ln54_fu_83_p2 == 1'd0) & (1'b0 == a_empty_n));
end

assign empty_10_fu_95_p1 = a_dout[7:0];

assign grp_matrixmul_Pipeline_Col_fu_64_ap_start = grp_matrixmul_Pipeline_Col_fu_64_ap_start_reg;

assign icmp_ln54_fu_83_p2 = ((i_fu_54 == 2'd3) ? 1'b1 : 1'b0);

assign res_din = grp_matrixmul_Pipeline_Col_fu_64_res_din;

endmodule //matrixmul
